.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __myconsoleVblank_locals 0
.define __main_locals 16

.SECTION ".myconsoleVblanktext_0x0" SUPERFREE

myconsoleVblank:
; sub sp,#__myconsoleVblank_locals
.ifgr __myconsoleVblank_locals 0
tsa
sec
sbc #__myconsoleVblank_locals
tas
.endif
; call r 0x2f0
jsr.l consoleVblank
; gtst inv 1 t 0 v 240 r 217 ind 217
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [lock + 0], tcc__r0
lda.w #0
sep #$20
lda.l lock + 0
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 376 ind 376
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 493 ind 493
; cmp op 0x95 inv 1 v 243 r 493
; cmp ne
bne +
; gsym_addr t 0 a 577 ind 577
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 493
; gtst inv 1 t 0 v 244 r 677 ind 677
; VT_jmp r 677 t 0 ji 0 inv 1 vtop->c.i 493
; gjmp_addr 0 at 758
jmp.w __local_1
; gsym_addr t 758 a 0 ind 795
__local_0:
; gsym_addr t 493 a 825 ind 825
; gtst finished; t 758
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [timeytime + 0], tcc__r0
lda.l timeytime + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x60ffed50
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [timeytime,0]
lda.b tcc__r0
sta.l timeytime + 0
__local_1:
; gsym_addr t 758 a 1344 ind 1344
; gsym_addr t 0 a 1378 ind 1378
; add sp, #__myconsoleVblank_locals
.ifgr __myconsoleVblank_locals 0
tsa
clc
adc #__myconsoleVblank_locals
tas
.endif
rtl
.ENDS

.SECTION ".maintext_0x1" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -2 + __main_locals + 1,s
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #3,tcc__r0
lda.w #3
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x11 fc 0xfffffffd
; st1 tcc__r0, [sp,-3]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -3 + __main_locals + 1,s
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #3,tcc__r0
lda.w #3
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x11 fc 0xfffffffc
; st1 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -4 + __main_locals + 1,s
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x11 fc 0xfffffffb
; st1 tcc__r0, [sp,-5]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -5 + __main_locals + 1,s
rep #$20
; call r 0x2f0
jsr.l spcBoot
; call r 0x2f0
jsr.l consoleInit
; push2 imm r 0xf0
pea.w 26624
; call r 0x2f0
jsr.l consoleSetTextVramBGAdr
; add sp, #2
pla
; push2 imm r 0xf0
pea.w 12288
; call r 0x2f0
jsr.l consoleSetTextVramAdr
; add sp, #2
pla
; push2 imm r 0xf0
pea.w 256
; call r 0x2f0
jsr.l consoleSetTextOffset
; add sp, #2
pla
; push4 imm r 0x52f0
pea.w :snespal
pea.w snespal + 0
; push4 imm r 0x52f0
pea.w :snesfont
pea.w snesfont + 0
; push1 imm r 0xf0
sep #$20
lda #32
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l consoleInitText
; add sp, #10
tsa
clc
adc #10
tas
; push4 imm r 0x52f0
pea.w :SOUNDBANK__1
pea.w SOUNDBANK__1 + 0
; call r 0x2f0
jsr.l spcSetBank
; add sp, #4
tsa
clc
adc #4
tas
; push4 imm r 0x52f0
pea.w :SOUNDBANK__0
pea.w SOUNDBANK__0 + 0
; call r 0x2f0
jsr.l spcSetBank
; add sp, #4
tsa
clc
adc #4
tas
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l spcLoad
; add sp, #2
pla
; push2 imm r 0xf0
pea.w 8192
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetGfxPtr
; add sp, #3
tsa
clc
adc #3
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 26624
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetMapPtr
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetDisable
; add sp, #1
tsa
clc
adc #1
tas
; push4 imm r 0x12f0
pea.w :tccs_L.BqUZtcKmMt8
pea.w tccs_L.BqUZtcKmMt8 + 0
; push2 imm r 0xf0
pea.w 10
; push2 imm r 0xf0
pea.w 5
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #8
tsa
clc
adc #8
tas
; call r 0x2f0
jsr.l setScreenOn
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l spcPlay
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 4113 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x1011 fc 0x2121
; load 9
; type 4 reg 0x50f0 extra 0xba59e470
; ld4 #8481,tcc__r9
lda.w #8481
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x2122
; load 9
; type 4 reg 0x50f0 extra 0xba59e470
; ld4 #8482,tcc__r9
lda.w #8482
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x2122
; load 9
; type 4 reg 0x50f0 extra 0xba59e470
; ld4 #8482,tcc__r9
lda.w #8482
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
__local_10:
; gtst inv 1 t 0 v 240 r 5572 ind 5572
; uncond jump: nop
; gtst finished; t 0
; gtst inv 1 t 0 v 242 r 5651 ind 5651
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-5],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -5 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 5865 ind 5865
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5953 ind 5953
; cmp op 0x95 inv 1 v 243 r 5953
; cmp ne
bne +
; gsym_addr t 0 a 6040 ind 6040
brl __local_2
+
; gtst finished; t 5953
; gtst inv 1 t 0 v 244 r 6112 ind 6112
; VT_jmp r 6112 t 0 ji 0 inv 1 vtop->c.i 5953
; gjmp_addr 0 at 6197
jmp.w __local_3
; gsym_addr t 6197 a 0 ind 6235
__local_2:
; gsym_addr t 5953 a 6267 ind 6267
; gtst finished; t 6197
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 0x97
; ucmpcd tcc__r0, #5
ldx #1
lda.b tcc__r0
sec
sbc.w #5
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 6197 v 5 r 6592 ind 6592
; gsym_addr t 6197 a 6632 ind 6632
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 6197 v 243 r 6723 ind 6723
; cmp op 0x95 inv 1 v 243 r 6723
; cmp ne
bne +
__local_3:
; gsym_addr t 6197 a 6813 ind 6813
brl __local_4
+
; gtst finished; t 6723
; gtst inv 1 t 0 v 245 r 6888 ind 6888
; VT_jmp r 6888 t 0 ji 1 inv 1 vtop->c.i 6723
; gsym_addr t 0 a 6973 ind 6973
; gtst finished; t 6723
; call r 0x2f0
jsr.l andySpcUploadTest
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #15
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [timeytime,0]
lda.b tcc__r0
sta.l timeytime + 0
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-3],tcc__r0
; stack adjust: fc + disp - loc - 256 -252
lda.w #0
sep #$20
lda -3 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-4],tcc__r1
; stack adjust: fc + disp - loc - 256 -253
lda.w #0
sep #$20
lda -4 + __main_locals + 1,s
rep #$20
sta.b tcc__r1
; load 2
; type 16 reg 0x3f0 extra 0x3
; ld2 [timeytime + 0], tcc__r2
lda.l timeytime + 0
sta.b tcc__r2
; gen_opi len 2 op 0x97
; ucmpcd tcc__r2, #9
ldx #1
lda.b tcc__r2
sec
sbc.w #9
tay
beq +
bcs ++
+ dex
++
stx.b tcc__r5
; saveregging
; store r 0x0 fr 0x1f2 ft 0x4 fc 0xfffffff4
; st4 tcc__r0, [sp,-12]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r0
sta -12 + __main_locals + 1,s
lda.b tcc__r0h
sta -10 + __main_locals + 1,s
; saveregging
; store r 0x1 fr 0x1f2 ft 0x4 fc 0xfffffff0
; st4 tcc__r1, [sp,-16]
; stack adjust: fc + disp - loc - 256 -254
lda.b tcc__r1
sta -16 + __main_locals + 1,s
lda.b tcc__r1h
sta -14 + __main_locals + 1,s
; gtst inv 1 t 0 v 5 r 8335 ind 8335
; gsym_addr t 0 a 8372 ind 8372
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 8460 ind 8460
; cmp op 0x95 inv 1 v 243 r 8460
; cmp ne
bne +
; gsym_addr t 0 a 8547 ind 8547
brl __local_5
+
; gtst finished; t 8460
; load 0
; type 16 reg 0x3f0 extra 0x3
; ld2 [timeytime + 0], tcc__r0
lda.l timeytime + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x4)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #55
sta.b tcc__r0
; gjmp_addr 0 at 8885
jmp.w __local_6
; gsym_addr t 8885 a 0 ind 8923
__local_5:
; gsym_addr t 8460 a 8955 ind 8955
; load 0
; type 16 reg 0x3f0 extra 0xba597350
; ld2 [timeytime + 0], tcc__r0
lda.l timeytime + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x4)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #48
sta.b tcc__r0
; gjmp_addr 0 at 9263
jmp.w __local_7
; gsym_addr t 9263 a 0 ind 9301
__local_6:
; gsym_addr t 8885 a 9333 ind 9333
__local_7:
; gsym_addr t 9263 a 9368 ind 9368
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x12f0
pea.w :tccs_L.BqUZtcKmMt9
pea.w tccs_L.BqUZtcKmMt9 + 0
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-16],tcc__r0
; stack adjust: fc + disp - loc - 256 -248
lda -10 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-12],tcc__r0
; stack adjust: fc + disp - loc - 256 -242
lda -4 + __main_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l consoleDrawText
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-3],tcc__r0
; stack adjust: fc + disp - loc - 256 -241
lda.w #0
sep #$20
lda -3 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x4
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -3 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffd
; st1 tcc__r0, [sp,-3]
; stack adjust: fc + disp - loc - 256 -241
sep #$20
lda.b tcc__r0
sta -3 + __main_locals + 1,s
rep #$20
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-3],tcc__r0
; stack adjust: fc + disp - loc - 256 -241
lda.w #0
sep #$20
lda -3 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #28
ldx #1
lda.b tcc__r0
sec
sbc.w #28
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 11041 ind 11041
; gsym_addr t 0 a 11080 ind 11080
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 11170 ind 11170
; cmp op 0x95 inv 1 v 243 r 11170
; cmp ne
bne +
; gsym_addr t 0 a 11260 ind 11260
brl __local_8
+
; gtst finished; t 11170
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #3,tcc__r0
lda.w #3
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffd
; st1 tcc__r0, [sp,-3]
; stack adjust: fc + disp - loc - 256 -241
sep #$20
lda.b tcc__r0
sta -3 + __main_locals + 1,s
rep #$20
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc - 256 -242
lda.w #0
sep #$20
lda -4 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -4 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffc
; st1 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc - 256 -242
sep #$20
lda.b tcc__r0
sta -4 + __main_locals + 1,s
rep #$20
__local_8:
; gsym_addr t 11170 a 12185 ind 12185
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc - 256 -242
lda.w #0
sep #$20
lda -4 + __main_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #24
ldx #1
lda.b tcc__r0
sec
sbc.w #24
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 12541 ind 12541
; gsym_addr t 0 a 12580 ind 12580
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 12670 ind 12670
; cmp op 0x95 inv 1 v 243 r 12670
; cmp ne
bne +
; gsym_addr t 0 a 12760 ind 12760
brl __local_9
+
; gtst finished; t 12670
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffffb
; st1 tcc__r0, [sp,-5]
; stack adjust: fc + disp - loc - 256 -243
sep #$20
lda.b tcc__r0
sta -5 + __main_locals + 1,s
rep #$20
; call r 0x2f0
jsr.l spcStop
__local_9:
; gsym_addr t 12670 a 13115 ind 13115
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -240
lda.b tcc__r0
sta -2 + __main_locals + 1,s
__local_4:
; gsym_addr t 6723 a 13385 ind 13385
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc - 256 -240
lda -2 + __main_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x0
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -2 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc - 256 -240
lda.b tcc__r0
sta -2 + __main_locals + 1,s
; call r 0x2f0
jsr.l spcProcess
; call r 0x2f0
jsr.l WaitForVBlank
; load 0
; type 4113 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x1011 fc 0x2121
; load 9
; type 4 reg 0x50f0 extra 0xba55fbb0
; ld4 #8481,tcc__r9
lda.w #8481
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [bgcolor + 0], tcc__r0
lda.l bgcolor + 0
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x11)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r0
and.w #255
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x2122
; load 9
; type 4 reg 0x50f0 extra 0xba55fbb0
; ld4 #8482,tcc__r9
lda.w #8482
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [bgcolor + 0], tcc__r0
lda.l bgcolor + 0
sta.b tcc__r0
; gen_opi len 2 op 0xcd
; shr tcc__r0, #8
lda.b tcc__r0
xba
and #$00ff
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x2122
; load 9
; type 4 reg 0x50f0 extra 0xba55fbb0
; ld4 #8482,tcc__r9
lda.w #8482
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; gjmp_addr 5572 at 15275
jmp.w __local_10
; gsym_addr t 15275 a 5572 ind 15318
; gsym_addr t 0 a 15355 ind 15355
; gsym_addr t 0 a 5572 ind 15389
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 15499
jmp.w __local_11
; gsym_addr t 15499 a 0 ind 15539
__local_11:
; gsym_addr t 15499 a 15573 ind 15573
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ramBqUZtcKmMt.data" APPENDTO "globram.data"

bgcolor dsb 2
timeytime dsb 2
lock dsb 1

.ENDS

.SECTION "BqUZtcKmMt.data" APPENDTO "glob.data"

.db $0,$0
.db $0,$0
.db $0
.ENDS

.SECTION ".rodata" SUPERFREE

tccs_L.BqUZtcKmMt8: .db $4a,$75,$6e,$67,$6c,$69,$73,$74,$20,$4d,$6f,$76,$65,$6d,$65,$6e,$74,$0
tccs_L.BqUZtcKmMt9: .db $25,$63,$0
.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
.ENDS
